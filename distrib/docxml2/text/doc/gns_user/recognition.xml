<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter>
<section niv='1'><title>Hierarchical recognition with &tool;</title>




<section niv='2'><title>Overview</title>


<p>The use of automatic tools in the design of integrated circuits allows 
the generation of complex circuits made up of a large number of blocks of
identical structure.
In many cases these blocks represent a significant part of the circuit, and 
require a particular attention of the designer during verification in order to
validate the structure generated by the automatic design tools.</p>

<p>The Yagle tool automatically generates a functional description without
requiring any a priori knowledge of the circuit.
This capability is ideal in the case of digital circuits made up of many
diversified structures. However, rule-based recognition, the alternative to
the automatic approach, is significantly more efficient in the handling
of repetitive structures. Furthermore, pattern matching is the only way 
to cope with mixed analog / digital designs.</p>

<p>Embedded memory cores are the perfect example of the use of regular,
repetitive structures. A large part of the design is made up of the 
arrays of memory cells together with analog blocks for pre-charging 
and amplification. Such designs can be represented by highly compact, 
hierarchical structural descriptions.</p>

<p>&tool; allows the user to provide hierarchical abstraction rules
in a similar way to the original structural description.</p>

<p>Hierarchical recognition of regular structure blocks from transistor level
allow to perform faster validation on high complexity circuits.
Performing the validation at transistor level guarantees the precision of the 
validation, since the transistor level is the most accurate 
description of the final circuit.
</p>

<p>&tool; provides the means for today's circuit designers to satisfy 
the demand for rapid time-to-market whilst enhancing the robustness 
of their validation strategy.</p>

<p>The most important application of the &tool; tool are:</p>
<list>
<item>Combined structural and functional verification of custom
blocks.</item>
<item>Automatic functional characterization of embedded memory
cores.</item>
<item>High speed formal verification of extremely large, 
regular designs, such as memory cores.</item>
<item>Verification of in-house structural design rules.</item>
</list>

</section>



<section niv='2'><title>Description</title>


<p>The &tool; tool offers designers the possibility of writing generic rules to verify the structural integrity of all or part of their circuits. Each recognition rule is written in a syntax compatible with VHDL. The rules are fully hierarchical, allowing concise descriptions of complex structures. In addition, each rule can be made generic, meaning that interconnections of arbitrary numbers of components can be represented.</p>

<list>
<item>The input file is a netlist of transistors (including capacitances and
resistances of the interconnecting wires) extracted from the layout in SPICE
format.</item>
<item>&tool; Isolates all circuit structures matching the user-defined recognition rules.</item>
<item>Each recognition rule can be associated with an ACTION which is executed upon validation of the rule.</item>
<item>ACTIONs can be used for example to customize VHDL or Verilog code generation for particular structures.</item>
</list>


</section>


<section niv='2'><title>Hierarchical Generic Recognition</title>


<p>&tool; combines functional and structural verification in a
single tool. Structural verification is performed by the application of
user-defined hierarchical rules, starting at the transistor-level.
These rules, written in VHDL, specify interconnections of a fixed
or arbitrary number of components. 
The structure of even complex circuit architectures can be 
fully described.</p>

<p>Behavioral models can be automatically generated even for totally 
generic structures. This is done by associating actions with the 
recognition rules.
Each action is a small program, written by the user, in a subset
of 'C' which dynamically generates the model based upon the sizes of the recognized structures.</p>


</section>
<pagebreak/>


<section niv='2'><title>Integration with Yagle</title>


<p>With the addition of the GNS module, Yagle is a complete functional 
abstraction solution. This technology, coupled with the FCL technology to isolate
basic building-blocks, allows rapid verification of the regular structures in a design 
using compact user-defined rules.</p>

<imgHsize namehtml="gns_integration.gif"  namepdf="gns_integration.gif" hpdf="368pt" wpdf="302pt"/>

<p>The circuit is automatically partitioned into regular and non-regular
parts. Yagle calculates a functional model which seamlessly integrates 
with the models generated by GNS to allow simulation
and verification of the complete design.</p>


</section>

</section>
</chapter>
