<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter>
<section niv='1'><title>Lab6. Cpu2901</title>
<section niv='2'><title>Design Description</title>
<imgsize namehtml="amd2901.gif" namepdf="amd2901.gif" wpdf="340pt"/>
</section>
<section niv='2'><title>Database Generation</title>
<section niv='3'><title>Global Configuration</title>
<p>The complete configuration required for the database generation takes place in the <f>script0_db.tcl</f>. The script also launches the commands that effectively generate that database. </p>
<p>Configuration variables are set in the Tcl script by the mean of the <f>avt_config</f> function.</p>
<glossary>
<row type='split'><article><f>avt_config tasGenerateDetailTimingFile yes</f></article>
<def>tells the tool to dump on disk the <f>.dtx</f> file, which contains all the cones' timing arcs (otherwise the tool only dumps timing paths in the .ttx file).</def></row>
<row type='split'><article><f>avt_config tasExitAfterDetailTimingFile yes</f></article>
<def>tells the tool to dump on disk only the <f>.dtx</f> file.</def></row>
<row type='split'><article><f>avt_config tasGenerateConeFile yes</f></article>
<def>tells the tool to dump on disk the .cns file, which contains the partitions (the cones) created by the partitioning algorithm.</def></row>
<row type='split'><article><f>avt_config tasModelsForDelays scm_cpl</f></article>
<def>tells the tool to dump on disk all the models used to compute cones' delays. Those models are dumped in the .stm file. Necessary when re-computation is needed, as in crosstalk analysis.</def></row>
<row type='split'><article><f>avt_config yagleAutomaticLatchDetection yes</f></article>
<def>tells the tool to make a Boolean analysis of loops to detect memorizing elements.</def></row>
</glossary>
<p>The temperature and supplies specifications take place in the <f>cpu2901.spi</f> file:</p>
<code>
<cl>.TEMP 125</cl>
<cl>.GLOBAL vdd vss</cl>
<cl>Vsupply vdd 0 DC 1.62</cl>
<cl>Vground vss 0 DC 0</cl>
</code>
<p>As the <f>cpu2901.spi</f> subcircuit is not instantiated, the <f>vdd</f> and <f>vss</f> signals appear in the <f>.GLOBAL</f>
statement.</p>
</section>

<section niv='3'><title>Technology Integration</title>
<p>In the present example, the avt_LoadFile command is used.</p>
<code>avt_LoadFile ./bsim3_018.tech</code>
</section>

<section niv='3'><title>Database Generation</title>
<p>The generation launch is done through the command hitas:</p>
<code>
<cl>avt_LoadFile cpu2901.spi</cl>
<cl>set fig [hitas cpu2901] </cl>
</code>
</section>

<section niv='3'><title>Exercises</title>
<list>
<item>Ex 6.1. Check in the <f>.rep</f> file the supplies that have been detected</item>
<item>Ex 6.2. Check in the <f>.rep</f> file the latches that have been detected</item>
<item>Ex 6.3. Look at the latch nodes in the CNV file, identify data and commands.</item>
<item>Ex 6.4. Configure the tool to mark master-slave in the <f>.rep</f> file</item>
</list>
</section>

</section>

<section niv='2'><title>Database Analysis</title>
<section niv='3'><title>Path Searching with the Tcl Interface</title>
<p>The complete configuration required for the database browsing takes place in the <f>script1_report.tcl</f>. </p>
<p>The command:</p>
<code>set fig [ttv_LoadSpecifiedTimingFigure cpu2901]</code>
<p>reads the timing database from disk.</p>
<p>The command:</p>
<code>set clist [ttv_GetPaths $fig * * uu 5 critic path max]</code>
<p>gives the 5 most critical paths (<f>critic</f> and <f>path</f> arguments) of the design, that begin and end on a rising transition (<f>uu</f> argument), with no specification of signal name (<f>* *</f> arguments), in the database pointed out by <f>$fig</f>. The function returns a pointer on the newly created list.</p>
<p>The command:</p>
<code>ttv_DisplayPathListDetail stdout $clist</code>
<p>displays on the standard output the detail of all the paths of the path list given by the <f>ttv_GetPaths</f> function.</p>
</section>

<section niv='3'><title>Exercises</title>
<p>Ex 6.5 Find the most critical access time from connector <f>ck</f></p>
</section>

<section niv='3'><title>Path Searching with the GUI</title>
<p>Database can also be accessed with the xtas GUI. To launch the GUI, type in command line:</p>
<code># xtas</code>
<p>Open the database <f>cpu2901.dtx</f> and follow the same steps as for the adder.</p>
</section>

</section>

<section niv='2'><title>Stability and Timing Constraints Checks</title>
<p>The complete configuration required for stability analysis takes place in the <f>script2_stb.tcl</f>.</p>
<section niv='3'><title>Stability with Tcl Interface</title>
<section niv='4'><title>Timing Constraints</title>
<p>Timing constraints are set in SDC format. Let's review the constraints commands applied to the cpu2901:</p>
<glossary>
<row type='split'><article><f>avt_config stbDetailedGraph yes</f></article>
<def>Stability analysis on the detailed graph (.dtx file).</def></row>

<row type='split'><article><f>inf_SetFigureName cpu2901</f></article>
<def> tells the tool to apply the SDC constraints to the design cpu2901.</def></row>

<row type='split'><article><f>create_clock -period 10000 -waveform {5000 0} ck</f></article>
<def>Creates of clock of period 10000</def></row>

<row type='split'><article><f>inf_DefineConditionedCommandStates * noverif</f></article>
<def>No check of the gated clocks for the moment</def></row>

<row type='split'><article><f>set_input_delay -min 2000 -clock ck -clock_fall [all_inputs]</f></article>
<def></def></row>
<row type='split'><article><f>set_input_delay -max 6500 -clock ck -clock_fall [all_inputs]</f></article>
<def>Defines a switching window between times 2000 and 6500 on the input connectors</def></row>

<row type='split'><article><f>inf_Drive cpu2901</f></article>
<def>Dumps on disk the timing constraints in Avertec's STB format (for GUI use)</def></row>

</glossary>
</section>

<section niv='4'><title>Stability Analysis</title>
<p>Launch of the stability analysis is done by invoking the following commands:</p>
<p>As before, the command:</p>
<code>set fig [ttv_LoadSpecifiedTimingFigure cpu2901]</code>
<p>reads the timing database from disk.</p>
<p>The command:</p>
<code>set stbfig [stb $fig]</code>
<p>launches the stability analysis.</p>
</section>
</section>

<section niv='3'><title>Exercises</title>
<list>
<item>Ex 6.6. The stability analysis produces warning of the kind "[STB WAR 101] No clock for the command ...". Try
to identify the cause by looking at timing paths to those commands (with the GUI).</item>
<item>Ex 6.7. Generate the database with connector <f>fonc</f> stuck to 1 and connector <f>test</f> stuck to 0. Use
<f>inf_SetFigureName</f> and <f>set_case_analysis</f>. Observe the REP file</item>
<item>Ex 6.8. Perform a new stability analysis and observe the differences.</item>
<item>Ex 6.9. Disable timing checks between masters and slave (<f>set_false_path -setup / -hold</f>).</item>
</list>
</section>

<section niv='3'><title>Stability with the GUI</title>
<section niv='4'><title>Timing Constraints</title>
<p>In the case where the stability analysis is done from the GUI, the timing constraints must be set in a special file cpu2901.inf. This file is read at the start of the xtas GUI. Ass this file is generated with the Tcl command <f>inf_Drive</f>, it contains the same constraint information as in the Tcl script, in Avertec proprietary format STB.</p>
</section>

<section niv='4'><title>GUI Launch</title>
<p>To launch the GUI, type in command line:</p>
<code># xtas</code>
<p>Open the database <f>cpu2901.dtx</f> from the menu:</p>
<code>&gt; File &gt; Open</code>
<p>Load the INF file <f>cpu2901.inf</f> from the menu:</p>
<code>&gt; File &gt; Load an INF file</code>
</section>

<section niv='4'><title>Stability Analysis</title>
<p>Launch the stability analysis from the menu:</p>
<code>&gt; Tools &gt; Stability</code>
<p>This will open the "Stability Parameterization" window. Default configuration is sufficient to perform a first run.</p>
<p>Clicking on OK in the "Stability Parameterization" window launches the stability analysis. Once the algorithm has finished, the "Stability Analysis Window" appears, reporting the timing violations.</p>
<p>To observe the timing diagrams relative to a specific violation, select one in the list, and select the menu:</p>
<code>Tools &gt; Debug Error</code>
<p>This will open the "Signal Selection" window, where the signal associated with the selected violation appears. Clicking on OK will make the "Debug" window appear.</p>
<p>This window displays the impact of each path of the fan-in of the violated-signal (the fan-in appears in the "Input Signals List" list). Clicking on one the input signals will make appear the appropriate timing diagrams.</p>
<p>To get details on the path associated with the timing diagram, select the menu:</p>
<code>&gt; Tools &gt; Get Paths</code>
<p>Then select the path and select the menu:</p>
<code>&gt; Tools &gt; Path Details </code>
</section>

</section>

<section niv='3'><title>Exercises</title>
<list>
<item>Ex 6.10. Modify the <f>set_input_delay</f> to suppress violations.</item>
</list>
</section>

</section>

<section niv='2'><title>Signal Integrity</title>
<section niv='3'><title>Introduction</title>
<p>Avertec's SI analysis computes the delta-delays and voltage peaks due to coupling capacitances, for all the signals in the design.</p>
<p>SI analysis is based upon the propagation of switching windows. The tool uses switching windows intersections to detect real crosstalk aggressions situations. It then uses second-order charge transfer models to compute the impact of aggressors on delay and voltage-levels.</p>
<p>The propagation engine is the same as the one used for the stability analysis and the configuration made for the stability analysis is still pertinent for the SI analysis.</p>
<p>Furthermore, timing constraints are still taken into account, and the tool performs crosstalk-aware timing checks (setup/hold margins). </p>
<p> </p>
</section>

<section niv='3'><title>Signal Integrity with the Tcl Interface</title>
<section niv='4'><title>SI Configuration</title>
<p>The complete configuration required for SI analysis takes place in the <f>script3_xtalk.tcl</f>.</p>
<p>The following additional variables are used to perform the crosstalk-aware stability analysis: </p>
<glossary>
<row type='split'><article><f>avt_config stbCrosstalkMode yes</f></article>
<def>tells the tool to perform SI analysis.</def></row>
<row type='split'><article><f>avt_config stbDetailedGraph yes</f></article>
<def>tells the tool to perform SI analysis on detailed graph.</def></row>
<row type='split'><article><f>avt_config stbDetailedAnalysis yes</f></article>
<def>tells the tool not to merge switching windows when multiple ones appear on a single signal (unless they overlap). This configuration is more precise and less pessimistic.</def></row>
</glossary>
</section>

<section niv='4'><title>SI Analysis</title>
<p>Launch of the crosstalk-aware stability analysis is done by invoking the following commands:</p>
<p> </p>
<p>As before, the command:</p>
<code>set fig [ttv_LoadSpecifiedTimingFigure adder]</code>
<p>reads the timing database from disk.</p>
<p>The command:</p>
<code>set stbfig [stb $fig]</code>
<p>launches the stability analysis. </p>
<p>When invoked in crosstalk mode, the stb function creates two additional files: </p>
<list>
<item>adder.ctk reports human-readable delta-delays and voltage peaks</item>
<item>adder.ctx contains the delta-delays for database use</item>
</list>
</section>

<section niv='4'><title>Exercise</title>
<p>Ex 6.11. Re-analyze timing paths with crosstalk information. Use <f>ttv_LoadCrosstalkFile</f> (this command reads the file 
<f>adder.ctx</f>, and back-annotates the database with crosstalk-induced delta-delay information.</p>
</section>

<section niv='4'><title>Analyzing Voltage Peaks</title>
<p>Not yet available in Tcl. Available in GUI.</p>
</section>

</section>

<section niv='3'><title>Signal Integrity with the GUI</title>
<section niv='4'><title>GUI Launch</title>
<p>To launch the GUI, type in command line:</p>
<code># xtas</code>
<p>Open the database adder.ttx from the menu:</p>
<code>&gt; File &gt; Open</code>
</section>

<section niv='4'><title>SI Configuration</title>
<p>To launch the SI analysis process, select in the menu:</p>
<code>&gt; Tools &gt; Stability Analysis</code>
<p>(as said before, the SI analysis is based on the propagation of switching windows the stability analysis performs).</p>
<p>This will open the "Stability Parameterization" window. Clicking on the "Crosstalk Analysis" checkbox will enable the advanced configuration checkboxes. Default configuration is sufficient to perform a first run.</p>
</section>

<section niv='4'><title>SI Analysis</title>
<p>Clicking on OK in the "Stability Parameterization" window launches the analysis (iterations status is reported in the progress bar). Once iterations have converged, the "Stability Analysis Results" window appears, reporting the timing violations.</p>
<p>To observe the timing diagrams relative to a specific violation, select one in the list, and select the menu:</p>
<code>&gt; Tools &gt; Debug Error</code>
<p>This will open the "Signal Selection" window, where the signal associated with the selected violation appears. Clicking on OK will make the "Debug" window appear.</p>
<p>This window displays the impact of each path of the fan-in of the violated-signal (the fan-in appears in the "Input Signals List" list). Clicking on one the input signals will make appear the appropriate timing diagrams.</p>
</section>

<section niv='4'><title>Re-Analyzing Timing Paths</title>
<p>To get details on the path associated with the timing diagram, select the menu:</p>
<code>&gt; Tools &gt; Get Paths</code>
<p>Then select the path and select the menu:</p>
<code>&gt; Tools &gt; Path Details </code>
<p>This time, the detail of the path is given with the contribution of the coupled signals.</p>
</section>

<section niv='4'><title>Analyzing Voltage Peaks</title>
<p>To access to voltage peaks report, from the "<f>Stability Analysis Results</f>" window, select the menu:</p>
<code>&gt; Tools &gt; Noise Analysis.</code>
<p>This will open the "<f>Noise Analysis Results</f>" window.</p>
<p>Voltage peaks are classified following a sum of four criteria, each criteria being attributed a score:</p>
<list>
<item>Noise: ratio between the voltage peak and the minimum threshold of the fan-out gates.</item>
<item>Interval: overlapping ratio between the selected signal and its aggressors</item>
<item>Crosstalk: number of aggressors contributing to the voltage peak. The less aggressors there is, the higher is the score (as the voltage peak is due to a few aggressors, the situation is more likely to occur).</item>
<item>Activity: estimation of the transition density of a signal. Clock signal value is 10, others signals' value is 0.</item>
</list>
<p>The model box has either value "scr" or "cc". The value "scr" stands for "single constant resistor", and tells that the voltage peak is computed with drivers modeled as equivalent resistors. The value "cc" stands for "connector constant", and is applied when the driver is a connector. The voltage peak is computed with a default resistor value. </p>
<p>To access detailed crosstalk information about a voltage peak on a signal, select the signal in the list, then select the menu:</p>
<code>&gt; View &gt; Crosstalk Info</code>
<p>This will open the "Crosstalk Info" window, in which appear all the aggressors of the signal, as well as their contribution to the voltage peak. The four letters B W R F specify:</p>
<p>B: aggressor contributes to decrease delay</p>
<p>W: aggressor contributes to increase delay</p>
<p>R: aggressor contributes to voltage overshoot</p>
<p>F: aggressor contributes to voltage undershoot</p>
<p>All the information of the "Noise Analysis Results" and "Crosstalk Info" windows is also available in the CTK file.</p>
</section>

</section>

</section>

</section>

</chapter>

