<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter>
<section niv='1'><title>Analog Sub-circuit Characterization</title>

<section niv='2'><title>Objective</title>
<p>&tool; is designed to compute propagation delays in digital designs. The advantage of this
restrictive target is to enable very fast computing times. The drawback is that non-digital
block characterization is not directly handled by &tool; and should be supplied to 3rd-party analog 
simulators. However, &tool; provides various ways to link with external characterizations.</p>
<p>First, the tool provides the means to choose between integrating a pre-characterization (such as 
a .lib or .dtx file) and integrating an on-the-fly characterization (by piloting an analog
simulator).</p>
<p>The pre-characterization strategy is easier to set-up, but has the drawback to provide 
only one characterization for (potentially) several instances of an analog sub-circuit.
The on-the-fly characterization is a little more difficult to set-up, but provides 
environment-dependant (PVT, input slopes, output loads) characterizations, and therefore greater 
accuracy.</p>
<p>Second, the tool is able to integrate the characterizations within either a pre-layout 
or a post-layout timing analysis.</p>
<p>In a pre-layout timing analysis, the source netlist is hierarchical. With appropriate directives,
the tool just ignores the analog sub-circuits during the parse of the netlist. It then constructs the
timing database on the remaining only-digital netlist, and fills the "analog holes" with either pre- or on-the-fly 
characterization.</p>
<p>In a post-layout timing analysis, the situation is a little trickier, as the source netlist is the
most often a flat-transistor netlist (if the extracted netlist is hierarchical, the integration process
is just the same as in a pre-layout timing analysis). The challenge is here to identify in the top-level 
netlist the transistors
that belong to the analog sub-circuits, in order to ignore them and create the "analog holes" and the 
remaining only-digital netlist. Assuming that the pre-layout netlist of the analog sub-circuit exists,
the identification in the top-level netlist of the transistors that belong to that sub-circuit is 
done by pattern matching.</p>
</section> <!-- Objective -->

<section niv='2'><title>Pre-Characterization</title>

<p>In this section, we present how to create a DTX file within a Tcl script, and how to get timing values 
from analog simulation results. We then present how to integrate this pre-characterization in the top-level 
timing database construction, the latest either being based upon a hierarchical or flat transistor netlist.</p> 


<p>The pre-characterization approach implies that this DTX file should be created before invoking &tool; on the entire design.</p>

<section niv='3'><title>Database Construction</title>
<p>The API functions provided with the <f>avt_shell</f> Tcl interface enable the creation of custom timing 
databases (DTX files). We will just present here a few of those functions , as well as the global 
construction mechanism.</p>

<p>The <f>ttv_CreateTimingFigure</f> function creates the timing database itself. The function takes a 
netlist as argument, and builds the interface of the new timing database upon the interface of the 
netlist provided. If the new timing database is intended to replace an analog sub-circuit, it 
ensures interface consistency between the "hole" in the top-level netlist 
and the newly created timing database. Note that the Vdd and Vss names must be specified if they appear on the
interface.</p>

<p>The <f>ttv_AddTiming</f> functions add timing arcs in the database.</p>
<p>The <f>ttv_FinishTimingFigure</f> function updates the database.</p>
<p>The <f>ttv_DriveTimingFigure</f> function prints the database on disk (DTX file).</p>

<p>See &tool; Tutorial for example.</p>
</section> <!-- Database Construction -->

<section niv='3'><title>Simulator Linking</title>
<p>The construction script described above associates "hard" values to the delays and slopes given as 
parameters of the <f>ttv_AddTiming</f> function (timing arc creation). It is the responsibility of the user to 
associate pertinent values to the parameters of the <f>ttv_AddTiming</f> function, by all the ways Tcl scripting provides.</p>
<p>However, the <f>avt_shell</f> Tcl interface also provides means to retrieve the values from analog simulations 
results. Provided functions cover:</p>
<list>
<item>Stimuli description and formatting</item>
<item>Simulator call</item>
<item>Delay and slope values retrieving</item>
</list>

<p>All these functions require the same configuration as the one required for SPICE deck generation. 
See &tool; Tutorial for example.</p>

</section> <!-- Simulator Linking -->

<section niv='3'><title>Hierarchical Netlist Integration (Pre-Layout)</title>

<p>The first step to perform when integrating the pre-characterized DTX file within a hierarchical 
netlist is the blackboxing of the instances of the analog sub-circuits, in order to obtain 
"analog holes" in the netlist. This is done with the <f>avt_SetBlackBoxes</f> function, taking as
argument the list of the sub-circuits to blackbox.</p>

<p>The default behavior of &tool; is not to try to fill the "holes". To tell the tool to fill the holes with timing 
characterizations, the <f>tasIgnoreBlackbox</f> variable should be set to <f>yes</f></p>
<p>The timing arcs for the instances <f>rs_clock_gen</f> are directly integrated in the new database.</p>
<p>See &tool; Tutorial for example.</p>
</section> <!-- Hierarchical Netlist Integration (Pre-Layout) -->

<section niv='3'><title>Flat Netlist Integration (Post-Layout)</title>
<p>Obtaining the "analog holes" for a flat netlist is a little more difficult than for a hierarchical netlist,
as the blackboxing mechanism can not be applied. In order to create these holes, &tool; uses a method based on
pattern-matching (the GNS pattern-matching engine). User must provide a transistor pattern 
(i.e. a transistor level netlist) of the analog 
sub-circuit which should be substituted by a custom timing database. The most common way is to provide 
the tool with the schematic SPICE netlist of 
the analog sub-circuit. The tool then tries to identify the set of transistors in the top-level netlist
that matches the provided pattern. The tool then removes those transistors from the top-level netlist, 
thus creating the "analog holes".</p>

<p>The following steps must be performed to activate the pattern-matching method:</p>
<list>
<item><p>Create a directory for the transistor patterns. The default one should be <f>cells</f>,
located in the working directory. However, it is possible to give any name and location to this directory, assuming
it is specified in the main script with the <f>gnsLibraryDir</f> variable, e.g.:</p>
<p><f>avt_config gnsLibraryDir ../on-the-fly</f></p></item>
<item>Copy a SPICE netlist of the pattern to match in this directory</item>
<item>Still in this directory, create the file LIBRARY. This file intends to tell the tool the 
files in which it will find the patterns. The LIBRARY name can be changed to any name, assuming it 
is specified in the main script with the <f>gnsLibraryName</f> variable.</item>
<item><p>Add the following line  in the main script to invoke the GNS pattern matching engine:</p>
<p><f>avt_config yagleUseGenius yes</f></p></item>
</list>

<p>If &tool; is invoked with the configuration set up to now, it will integrate the timing description (DTX file) 
of the "analog holes" corresponding to the removed transistors matching the given pattern.</p>
</section> <!-- Flat Netlist Integration (Post-Layout) -->

<section niv='3'><title>Netlists Consistency</title>
<p>The pre-characterization process is the same in the case of a flat or hierarchical top-level netlist.
It just requires the netlist of the analog sub-circuit to simulate, in order to obtain the appropriate values for 
the timing arcs. </p>
<p>When dealing with a hierarchical netlist, the user should provide a netlist of the analog sub-circuit coming
from the same source as the top-level (schematic editor or hierarchical extractor). Thus both netlists contain (or not)
parasitics, and the analysis is consistent.</p>
<p>When dealing with a flat netlist, it is most of the times in a post-layout approach. Actually, the only reason for 
using a flat netlist is that it is sometimes the only output parasitic extractors provide. In such a case, the
top-level netlist contains parasitics, and one must take care that the netlist used for simulation of the analog sub-circuit
also contains parasitics.</p>
</section> <!-- Netlists Consistency -->

</section> <!-- Pre-Characterization -->

<section niv='2'><title>On-the-Fly Characterization</title>
<p>The on-the-fly characterization follows the same principles as the pre-characterization, i.e.:</p>
<list>
<item>Link with an analog simulator</item>
<item>Create a timing database of the analog subcircuit</item>
<item>Integrate the database in a hierarchical or flat top-level netlist</item>
</list>
<p>The difference is that the steps one and two are performed for each instance of the analog subcircuit, taking
into account instantiation-specific parameters (output load). It then provides greater accuracy but implies
a different implementation.</p>
<p>On-the-fly characterization is based upon the GNS pattern-matching engine. The methodology is to associate an
"action" with a matching event i.e., each time the tool identifies a pattern in the top-level netlist, it executes
the corresponding action. Here the corresponding action will be the steps one and two described above 
(link with an analog simulator and create a timing database of the analog sub-circuit).</p>
<p>The difference of implementation lies in the description language used to write the action. As the pre-characterization 
method uses the Tcl language, the writing of the "action" for on-the-fly characterization uses the C language. By the 
way, the prototypes of the functions used in both cases are identical.</p>
<p>An action is then typically a C file. The association of an "action" with a pattern takes place in the 
LIBRARY file. </p>

<section niv='3'><title>Database Construction</title>
<p>Apart from the syntax, the C file used for simulator link and database creation is very close to the Tcl script
used for pre-characterization.</p>

</section> <!-- Database Construction -->
<section niv='3'><title>Hierarchical Netlist Integration (Pre-Layout)</title>
<p>The integration of on-the-fly characterization in a hierarchical netlist uses a combination
of the blackboxing and pattern-matching mechanisms.</p>
<list>
<item>The blackboxing mechanism should be used in the same way as in the pre-characterization
approach. It creates the "analog holes" in the top-level netlist.</item> 
<item>The pattern matching mechanism is used to execute the action described above, each 
time the tool encounters a pattern matching the "analog hole". As the analog sub-circuit has been removed
from the netlist, no information about the transistor structure of the analog sub-circuit remains in the
top-level netlist. Therefore, the pattern the tool will try to match with the "analog hole" is 
just the interface 
of the provided pattern. The user can provide as a pattern, either a sub-circuit containing transistors,
parasitics and so on, or an empty sub-circuit.</item>
</list>
<p>The remaining configuration is the same as in the approach of integration of a pre-characterization 
in a flat netlist.</p>
</section> <!-- Hierarchical Netlist Integration (Pre-Layout) -->
<section niv='3'><title>Flat Netlist Integration (Post-Layout)</title>
<p>The integration of on-the-fly characterization in a flat netlist also uses a combination
of the blackboxing and pattern-matching mechanisms. Here, the "analog holes" are created by the 
pattern matching mechanism itself, as in the integration of a pre-characterization in a flat netlist
approach. The blackboxing configuration (<f>tasIgnoreBlackbox</f>) should not be used. However,
it will have no effect on the netlist itself (as there is no instance to blackbox), but it may
have a side effect on the sub-circuit provided for the pattern matching engine (if the name of 
the latest appears in the <f>avt_SetBlackBoxes</f> function, it may be unintentionally blackboxed, 
making the pattern matching process to fail).</p> 
<p>The main advantage of on-the-fly characterization is to provide a specific timing database
for each instance of an analog sub-circuit, depending on instantiation context (e.g. output load). Another 
advantage of the on-the-fly approach is that the analog simulations are performed on the transistors
of the sub-circuit matching the pattern provided. Therefore each instance matching the pattern  
has its own parasitic information.</p>
</section> <!-- Flat Netlist Integration (Pre-Layout) -->
</section> <!-- On-the-Fly Characterization -->

</section> <!-- Analog Sub-circuit Characterization -->


</chapter>
