<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter>
<section niv='1'><title>Introduction</title>

<section niv='2'><title>Directories Description</title>
<p>The tutorial and the related files can be found in the following directory:</p>
<code>$AVT_TOOLS_DIR/tutorials/yagle</code>
<p>Among the directories presents in <f>$AVT_TOOLS_DIR/tutorials/yagle</f>, this tutorial will use the following ones:</p>
<list>
<item><f>addaccu/</f>: For the addaccu example</item>
<item><f>comb/</f>: For the combinational example</item>
<item><f>glitcher/</f>: For the glitcher example</item>
<item><f>rom/</f>: For the ROM example</item>
<item><f>shifter/</f>: For the shifter example</item>
</list>
<p>Along the tutorial the user is expected to change directory as needed to perform the operations related to each specific example.</p>
<p>The technology file used during the course of the tutorial is <f>bsim4_dummy.hsp</f> located in:</p>
<code>$AVT_TOOLS_DIR/tutorials/techno/bsim4_dummy.hsp</code>
</section>

<section niv='2'><title>Tool Description</title>
<p>Yagle is an automatic transistor-to-RTL functional abstractor, which automatically handles any kind of digital circuitry (CMOS and NMOS, pass-transistor logic, transmission gate logic, dynamic logic) and automatically detects and models latches and registers. Yagle generates industry-standard VHDL or Verilog, with a Spice-accurate timing back-annotation.</p>
</section>

<section niv='2'><title>Integration Flows</title>
<p>Yagle integrates in the most common design flows, as illustrated in the following diagram:</p>
<imgsize namehtml="yagtraining_flow_diagram.gif" namepdf="yagtraining_flow_diagram.gif" wpdf="480pt" />
</section>

<section niv='2'><title>Tool Setup and Execution</title>

<section niv='3'><title>Netlist Files</title>
<p>The netlist can be fed into Yagle in various formats, at different levels of hierarchy:</p>
<list>
<item>Spice/CDL flat transistor</item>
<item>Spice/CDL hierarchical</item>
<item>Hierarchical Structural VHDL</item>
<item>Structural Verilog</item>
<item>Parasitics in Spice, DSPF, SPEF</item>
</list>
</section>

<section niv='3'><title>Execution</title>
<p>Yagle functionalities are provided through a set of functions, that can be accessed through Avertec's Tcl interface: <f>avt_shell</f>.</p>
<p>Tool configuration is done with variables. The value of each variable can be set in the Tcl script by the <f>avt_config</f> function.</p>
</section>

<section niv='3'><title>Output Files</title>
<p>Yagle generates the following output files:</p>
<list>
<item>CNS/CNV: intermediate disassembled netlist</item>
<item>REP: report file</item>
<item>VHDL/Verilog: abstracted behavioral model</item>
<item>COR: VHDL/Verilog to CDL/Spice correspondence file</item>
</list>
</section>

<section niv='3'><title>Yagle GUI: XYagle</title>
<p>The XYagle GUI is invoked in the following way:</p>
<code>&gt; xyagle &amp;</code>
<p>XYagle is mainly used to browse the CNS intermediate disassembled netlist. For further information, please refer to the Yagle reference manual.</p>
</section>

</section>

</section>
</chapter>


<chapter>

<section niv='1'><title>Disassembly</title>

<section niv='2'><title>Cone Mapping</title>
<p>The base object of the methodology is the "cone". Disassembly can be seen as a conversion of a network of non-oriented transistors into a network of oriented cones.</p>
<p>The starting point of any partitioning strategy is the identification of the nodes on which we intend to build a sub-network. The idea of Yagle disassembly is to build sub-networks between which there is no charge transfer. Therefore, the signals controlling transistor gates define the interface between two sub-networks, and the nodes for which a sub-network is extracted during the partitioning are the nodes driving at less one transistor gate.</p>
<p>The extracted sub-networks are called cones. A cone is a DC-connected object: it contains all the paths that link the node to a voltage source through the source-drain connections of the transistors.</p>
<imgsize namehtml="partitioning.gif" namepdf="partitioning.svg"/>
<p>Each cone has a unique output and a certain number of inputs: the signals controlling the gates of the cone's transistors.</p>
<p>The construction of a cone on a node N consists in identifying all the current paths between the node N and a voltage source (Vdd or Vss). We call a "branch" a path that links the node N to a voltage source.</p>
</section>

<section niv='2'><title>False Branches Detection</title>
<p>The symmetric nature of MOS transistors has a significant impact on the construction of branches. Without knowing the transistors orientation, we must construct all the paths towards the voltage sources. It is possible that the correlations on the signals controlling the gates block some current paths. We call those current paths "false branches".</p>
<p>As we can see in the next figure, it is the logical context -i.e. the correlations between the inputs of the cone- that allows to establish rigorously the transistors orientation. This logical context also allows the elimination of false branches.</p>
<imgsize namehtml="yagtraining_falsebranch.gif" namepdf="yagtraining_falsebranch.gif" wpdf="252pt"/>
</section>
</section>
</chapter>

<chapter>
<section niv='1'><title>Behavior Generation</title>
<section niv='2'><title>Functional Characterization</title>
<p>The functional characterization of a cone is computed from the branch structure. A Boolean expression is generated for all the branches leading to Vdd. It gives the set condition of the node. Another expression is constructed for all the branches leading to Vss. It gives the reset condition of the node.</p>
<p>Each branch is considered as a chain of switches. For a N-Channel transistor, the switch is off when the gate signal is high. For a P-Channel transistor, the switch is off when the gate signal is low.</p>
<imgsize namehtml="yagtraining_funcchar.gif" namepdf="yagtraining_funcchar.gif" wpdf="315pt"/>
<p>For the signal E, the set condition is Eup, the reset condition is Edn. With those two expressions, it is possible to analyze the functionality of the cone. We must verify their orthogonality and their completeness.</p>
<p>If the two expressions are orthogonal, it exists no combination of the inputs for which a Vdd branch is active simultaneously as a Vss branch, i.e. if Eup+Edn = 0, the cone is non-conflictual. If the two expressions are complete, it exists no combination of the inputs for which no branch is active, i.e. if Eup+Edn = 1, the cone is non-HZ.</p>
<p>A cone that respects the orthogonality and completeness conditions is said to be CMOS DUAL. </p>
<p>For example, as Eup and Edn respect those conditions, they can then be grouped into a single expression on E:  E = not C or not B</p>
<p>Cup and Cdn do not respect orthogonality and completeness conditions, then the up and down conditions remain separated.</p>
</section>

<section niv='2'><title>Timing Back-annotation</title>
<p>The timing characterization of a cone is also computed from the branch structure, and then it perfectly maps on the functional characterization. Let's take the cone E of the following figure as an example. </p>
<imgsize namehtml="yagtraining_backannotation.gif" namepdf="yagtraining_backannotation.gif" wpdf="124pt"/>
<p>A propagation time is associated to a couple of signals: the output E of the cone, and one of its inputs (C or D). Actually, the switching of C or D does not always lead to the switching of E: the rising of C leads to the falling of E only if D has the logical value 1.</p>
<p>The computation of the propagation time CE is made under the hypothesis that the switching of the E is induced par the switching of C.</p>
<p>The value of the propagation time is then computed by a mixed analytical-numerical method, based on the IV curves and capacitances of the MOS transistors BSIM3/BSIM4 technology models.</p>
<p>Each possible propagation of a input transition towards a transition on the output is characterized; the cones are then characterized as follow: </p>
<imgsize namehtml="yagtraining_backannotation2.gif" namepdf="yagtraining_backannotation2.gif" wpdf="392pt"/>
</section>

<section niv='2'><title>VHDL and Verilog Description</title>
<p>The VHDL|Verilog characterization is done by translating the behavioral models of the cones into VHDL|Verilog syntax:</p>
<imgsize namehtml="yagtraining_vhdldesc.gif" namepdf="yagtraining_vhdldesc.gif" wpdf="382pt"/>
<p>For CMOS DUAL cones, a single signal assignment is generated, for example for the cone E as demonstrated in the first column (left), for non-CMOS DUAL cones, a process is built, listing all the possible assignations as it can be seen in the second column (right).</p>
<p>The final VHDL|Verilog is generated by mapping the timing characterization on the functional characterization. </p>
<p>For CMOS DUAL cones, three levels of precision are available. Let's take the cone E as an example: in term of behavior, the reduction of the expressions Eup and Edn to a single expression E = not C or not D is lossless. It is not the case in terms of timing: there are different timings associated with each expression and with each event occurring on a variable of the expression. </p>
<p>First level of precision:</p>
<p>If we intend to keep a compact VHDL|Verilog (i.e. the expression E = not C or not D), we must choose one timing among all the different timings characterizing the cone E. Typically, in Yagle, it is possible to choose between the maximum timing, the minimum timing, and the average timing. With choosing the maximum timing, this first level of precision leads to the following expression:</p>
<imgsize namehtml="yagtraining_vhdl1lev.gif" namepdf="yagtraining_vhdl1lev.gif" wpdf="312pt"/>
<p>Second level of precision:</p>
<p>Second and third levels of precision are obtained through splitting the expression E into Eup and Edn expressions. The second level of precision does not take into account the events on the variables of the expressions. The maximum, minimum or average timing can be chosen for up and down expression.</p>
<p>With choosing the maximum timing, this second level of precision leads to the following expression:</p>
<imgsize namehtml="yagtraining_vhdl2lev.gif" namepdf="yagtraining_vhdl2lev.gif" wpdf="312pt"/>
<p>Third level of precision:</p>
<p>The third level performs the complete timing characterization of the cone. A timing is associated with each event of each variable of each expression of the cone:</p>
<p>For non-CMOS DUAL cones, as the up and down expressions are not reduced to a single expression, only the second and third levels of precision are available. </p>
<imgsize namehtml="yagtraining_vhdl3lev.gif" namepdf="yagtraining_vhdl3lev.gif" wpdf="312pt"/>
</section>

</section>
</chapter>

<chapter>
<section niv='1'><title>Simple Combinational Example</title>
<section niv='2'><title>Comb Directory</title>
<p>The files and scripts needed for this example can be found in:</p>
<code>$AVT_TOOLS_DIR/tutorials/yagle/comb/</code>
</section>

<section niv='2'><title>Comb Design</title>
<p>This example intends to illustrate the concepts previously described (functional abstraction mechanisms, VHDL|Verilog generation and timing back-annotation) and to give a first glance at Yagle's setup and execution modes. </p>
<p>This example is based on the combinational design below:</p>
<imgsize namehtml="yagtraining_combdesign.gif" namepdf="yagtraining_combdesign.gif" wpdf="236pt"/>
<p>This design contains basic CMOS gates (nor, inverters, or) and a multiplexer based on pass-transistors. The design is described in the file comb.spi as a flat transistor netlist.</p>
</section>

<section niv='2'><title>Input Files</title>
<p>In order to perform the functional abstraction of the circuit, Yagle needs the following files:</p>
<list>
<item><f>comb.spi</f>: the design itself</item>
<item><f>bsim4_dummy.hsp</f>: the technology models of the transistors used in the design. Transistors' technology models are essential to compute delays. If the desired behavioral model (the VHDL) should not be back-annotated with timings, this file can be omitted. However, in such a case the tool needs to know the names of the transistor models. Those names should be set in the script with the <f>avtSpiTnModelName</f> and <f>avtSpiTpModelName</f> variables.</item>
<item><f>run.tcl</f>: the Tcl script performing the setup and execution of the tool.</item>
</list>
</section>

<section niv='2'><title>Basic Execution and Output Files</title>
<p>The configuration set in the <f>run.tcl</f> script is sufficient to perform a first functional abstraction of COMB. The only variables that need to be set are the names of the alimentations (VDD and VSS). Lines preceded by a '<f>#</f>' are commented. We will see their meaning in the following sections. With this given configuration file, the tool is invoked as follow:</p>
<code>&gt; run.tcl</code>
<p>The steps of the functional abstraction process are displayed on the standard output. It should have this appearance:</p>
<p>This Yagle run generates two files: </p>
<list>
<item><f>comb.vhdl</f>: the VHDL file resulting of the functional abstraction of COMB.</item>
<item><f>comb.rep</f>: the report file of the functional abstraction run. This file contains information about the run, warnings and errors that may occur during it. This file should be consulted after each run of Yagle. In the present case, the design being very simple, the file is empty.</item>
</list>
<p>It is also possible to generate a verilog file by adding the following line in the Tcl script:</p>
<code>avt_config avtOutputBehaviorFormat vlg</code>
</section>

<section niv='2'><title>Primary Options and Configuration</title>
<section niv='3'><title>CNS File Generation</title>
<p>As previously explained, the first step of the functional abstraction process is what is called disassembly. Disassembly is the partition of the original design into cones: it is the conversion of the netlist of non-oriented transistors into a netlist of oriented cones. In the basic execution mode, this netlist exists only as a data-structure in the program's memory, and is hidden from the user. It can be dumped on disk as an ASCII file by positioning the following variable in the Tcl script:</p>
<code>avt_config yagleGenerateConeFile yes</code>
<p>The programs then generates a CNS file (Cone Netlist Structure): <f>comb.cns</f>. For disk saving purposes, this file is compact, and therefore quite uneasy to read. It is possible to obtain a more verbose file by positioning the <f>avtVerboseCone</f> variable to <f>yes</f> in the Tcl script. The programs will then generate a CNV file (Cone Netlist Verbose): <f>comb.cnv.</f></p>
<p>Both files formats syntaxes are documented in the Yagle User Guide. Browsing the Cone Netlist Structure is far more convenient using the XYagle GUI. </p>
<code>&gt; xyagle &amp;</code>
<p>Selecting the file <f>comb.cns</f> in the dialog box will lead open the following window:</p>
<imgsize namehtml="yagtraining_combwindow.gif" namepdf="yagtraining_combwindow.gif" wpdf="302pt"/>
</section>

<section niv='3'><title>Disabling VHDL and Verilog Generation</title>
<p>For debugging purposes, it is also possible to disable the VHDL and Verilog generation. This can be done by positioning the following variable in the script:</p>
<code>avt_config YagleGenerateBehavior no</code>
<p>Yagle will stop after the disassembly process.</p>
</section>

<section niv='3'><title>Timing Back-annotation</title>
<p>In basic execution mode, the behavioral model (VHDL/Verilog) is generated without timing back-annotation. In order to perform this back-annotation, the first step is to include a technology file in the netlist to be abstracted. Here, we will use the file <f>bsim4_dummy.hsp</f>, which contains BSIM3 technology parameters of two models of transistors, named TN and TP.</p>
<code>avt_LoadFile ../techno/bsim4_dummy.hsp spice</code>
<p>As explained in the timing back-annotation relevant section, timing back-annotation supports three levels of precision.</p>
<p>First level of precision:</p>
<p>In basic execution mode, the back-annotation is made with the first level of precision. Timing back-annotation is invoked by setting the following variable:</p>
<code>avt_config yagleTasTiming tdmin|tdmed|tdmax</code>
<p>For CMOS DUAL cones, the <f>tdmin</f>, <f>tdmed</f> or <f>tdmax</f> directive selects the type of timing to be applied on the cone. For non-CMOS DUAL cones, this directive selects the type of timing to be applied on the up and down expressions of the cone.</p>
<p>Second level of precision:</p>
<p>This level is selected by setting the <f>yagleSplitTimingRatio</f> variable to a value V greater than one: if delays associated with up and down output transitions differ by a ratio greater than V, then up and down transitions are differentiated.</p>
<p>This variable allows to split the expression of the CMOS DUAL cones into up and down expressions, and to associate them minimum, average or maximum timing, according to the <f>tdmin</f>|<f>tdmed</f>|<f>tdmax</f> option.</p>
<p>Third level of precision:</p>
<p>This level is selected by setting the <f>yagleSensitiveTimingRatio</f> variable to a value V greater than one. For a given output transition (up or down), if delays associated with different input transitions differ by a ratio greater than V, then the delays are differentiated by input.</p>
</section>

<!--<section niv='3'><title>VHDL/CDL Correspondence File</title>
<p>The VHDL syntax limiting characters to [a-Z_] for signal naming, signal names in the VHDL file often differ from  signal names in the original netlist. In order to keep the correspondence between them, Yagle can generate a COR (CORrespondence) file. This file is generated when the <f>apiDriveCorrespondenceTable</f> variable is positioned to yes in the Tcl script.</p>
<p>Please note that this feature is not yet available in Verilog.</p>
</section>-->

</section>
</section>
</chapter>

<chapter>
<section niv='1'><title>Glitcher Example</title>
<section niv='2'><title>Glitcher Directory</title>
<p>The files and scripts needed for this example can be found in:</p>
<code>$AVT_TOOLS_DIR/tutorials/yagle/glitcher/</code>
</section>

<section niv='2'><title>Glitcher Design</title>
<p>This example intends to illustrate the utility of timing back-annotating an abstracted behavioral model. In this lab, we are going to perform the abstraction of the glitcher design described  below.</p>
<imgsize namehtml="yagtraining_glitcherdesign.gif" namepdf="yagtraining_glitcherdesign.gif" wpdf="326pt"/>
<p>We will perform functional abstraction with and without timing back-annotation. We will see from simulation results of the behavioral models, that they do not present the same behavior. Actually, we will see that the zero-delay model simply doesn't work.</p>
</section>

<section niv='2'><title>Normal Operating</title>
<p>The glitcher design includes a delay cell (<f>dly4x1</f>), in order to render the path going through the signals Idly and IdlyN longer than the path going through the signals <f>S0</f>,  <f>S1</f>,  <f>S2</f>,  <f>S3</f>,  <f>S4</f>,  <f>S5</f>. The operating timing diagram is then as follow: </p>
<imgsize namehtml="yagtraining_glitcherdiagram.gif" namepdf="yagtraining_glitcherdiagram.gif" wpdf="265pt"/>
<p>The glitch on <f>S6</f> is implied by the falling transition of <f>I</f>.</p>
</section>

<section niv='2'><title>Zero-delay Model</title>
<p>The zero-delay behavioral model is obtained by running the command:</p>
<code>&gt; run.tcl</code>
<p>Yagle generates the <f>glitcher.vhd</f> file. The result of the simulation is saved in the <f>glitcher.vcd</f> file, displayed in the following window.</p>
<imgsize namehtml="yagtraining_glitcher0delay.gif" namepdf="yagtraining_glitcher0delay.gif" wpdf="382pt"/>
<p>The simulation of the zero-delay model makes the glitch on <f>S6</f> appear at the rising transition of the input  signal <f>I</f>, which is false.</p>
</section>

<section niv='2'><title>With-delay Model</title>
<p>The with-delay behavioral model is obtained by setting the variable <f>yagleTasTiming</f> to <f>max</f>.</p>
<p>To observe the glitch, it is necessary to have a second level precision. The variable <f>yagleSplitTimingRatio</f> is positioned to 1.</p>
<imgsize namehtml="yagtraining_glitcherwithdelay.gif" namepdf="yagtraining_glitcherwithdelay.gif" wpdf="382pt"/>
<p>We can observe on the simulation trace (<f>glitcher_timed.vcd</f>) the correct behavior of the glitcher: the glitch is implied by the falling edge of <f>I</f>.</p>
</section>

</section>
</chapter>



<chapter>
<section niv='1'><title>Behavioral Optimization</title>
<p>One often wants to have a compact behavioral description. In order to optimize the VHDL|Verilog, Yagle disposes of three means: </p>
<list>
<item>Inverter minimization</item>
<item>Expression simplification </item>
<item>Signal suppression</item>
</list>

<section niv='2'><title>Inverter Minimization</title>
<p>Inverter minimization reduces a even chain of inverters to a single buffer, and an odd chain of inverters to a single inverter. This optimization is compatible with timing back-annotation of first level: the delay of the reduced buffer or inverter is the sum of the delays of the chain of inverters.</p>
<p>If timing back-annotation is of level two or three, inverters are split into up and down expressions, and are not minimized.</p>
</section>

<section niv='2'><title>Expression Simplification</title>
<p>When expression simplification is invoked, Yagle analyze each cone, and identifies the NOR, NAND and XOR expressions. This optimization is compatible with timing back-annotation of first level. The delay associated with the cone does not change.</p>
<p>If timing back-annotation is of level two or three, no simplification is done.</p>
</section>

<section niv='2'><title>Signal Suppression</title>
<p>Signal suppression can lead to aggressive optimization, as we will see in the following example. The principle is to replace a signal <f>S</f> by its expression, in all the expressions depending on the signal <f>S</f>. Signal suppression is not compatible with timing back-annotation. Expression simplification is always applied after signal suppression.</p>
</section>

</section>
</chapter>

<chapter>
<section niv='1'><title>Addaccu Example</title>
<p>This example intends to illustrate the VHDL optimization techniques described in the previous sections. Functional abstractions will be performed with and without timing back-annotation, in order to study the compatibility between optimizations and timing back-annotation.</p>

<section niv='2'><title>Addaccu Directory</title>
<p>The files and scripts needed for this example can be found in:</p>
<code>$AVT_TOOLS_DIR/tutorials/yagle/addaccu/</code>
</section>

<section niv='2'><title>Addaccu Design</title>
<p>The addaccu chip consists of a four-bit adder, a four-bit register, and a 2 to 1 four-bit multiplexer. </p>
<imgsize namehtml="yagtraining_addaccudesign.gif" namepdf="yagtraining_addaccudesign.gif" wpdf="273pt"/>
<p>The circuit performs an addition between either the <f>b[3:0]</f> and <f>a[3:0]</f> inputs when sel is set to 0, or between <f>b[3:0]</f> and the content of the four-bit register when sel is set to 1. The content of the register is overwritten by the values of the outputs <f>s[3:0]</f> on each falling edge of the clock, ck..</p>
</section>

<section niv='2'><title>Inverter Minimization</title>
<p>To activate inverter minimization, we just need to add the following line in the Tcl script:</p>
<code>avt_config yagleMinimizeInvertors yes</code>
<p>The tool is invoked in the classical way:</p>
<code>&gt; run.tcl</code>
<p>For example, let's consider the signal <f>s(1)</f>, in the optimized and non-optimized VHDLs:</p>
<imgsize namehtml="yagtraining_addaccuS1.gif" namepdf="yagtraining_addaccuS1.gif" wpdf="200pt"/>
<p>In the non-optimized VHDL, the signal <f>s(1)</f> is assigned through the first chain of inverters, and through the second simple assignment in optimized VHDL (where 1981 = 259 + 768 + 533 + 421):</p>
</section>

<section niv='2'><title>Expression Simplification</title>
<p>To activate expression simplification, we just need to add the following line in the Tcl script:</p>
<code>avt_config yagleSimplifyExpressions yes</code>
<p>The tool is invoked in the classical way:</p>
<code>&gt; run.tcl</code>
<p>For example, let's consider the signal <f>n37</f>, in the optimized and non-optimized VHDLs:</p>
<imgsize namehtml="yagtraining_addaccuN37.gif" namepdf="yagtraining_addaccuN37.gif" wpdf="308pt"/>
<p>In the non-optimized VHDL, the signal <f>n37</f> is assigned by the first code line, in the optimized VHDL, the signal <f>n37</f> is assigned by a more compact expression as displayed on the second code line of the example.</p>
</section>

<section niv='2'><title>Signal Suppression</title>
<p>From the design process, we know that the chip addaccu is made up of elementary gates, such as nor, nand, xor. We also know that the names of the internal signals of those building gates are all numbers: they will be prefixed by the tool by a 'n'. If we want to retrieve the expressions of the original RTL design, it is sufficient to suppress all the expressions relative to internal signals of building gates, i.e. all the expressions built on signals beginning with a 'n'.  </p>
<p>Signal suppression is performed by the mean of the following function:</p>
<code>inf_SetFigureName addaccu</code>
<code>inf_DefineSuppress "n*"</code>
<p>Looking at the <f>addaccu.vhd</f> file, we can see that the tool has retrieved the original XORs building the adder.</p>
</section>

</section>
</chapter>

<chapter>
<section niv='1'><title>Shifter Example</title>
<section niv='2'><title>Shifter Design</title>
<p>This example intends to illustrate the false branches detection mechanism included in Yagle. A shifter is the typical design leading to the construction of false branches. This example is limited to 3 bits, but it is already possible to see that a simple depth-first search leads to the construction of a large number of branches having a large number of transistors.</p>
<imgsize namehtml="yagtraining_shifterdesign.gif" namepdf="yagtraining_shifterdesign.gif" wpdf="308pt"/>
<p>In this example, we are going to study the behavior of Yagle on two shifters: a 4-bit shifter and a 32-bit shifter.</p>
</section>

<section niv='2'><title>Shifters Functional Abstraction</title>
<p>As previously explained , Yagle performs a functional analysis of the logical context. This functional analysis establishes the correlations between the transistors of the branches under construction. Yagle is then able to orient the transistors and to detect false branches. </p>
<p>It is possible to control the depth of the functional analysis with the <f>yagleAnalysisDepth</f> variable. In default configuration, the depth is 7. This depth is sufficient to perform the functional abstraction of most of the chips, in particular the present shifters:</p>
<code>&gt; run.tcl</code>
<p>The functional abstractions last a few seconds. We are now going to study the effects of lowering the depth of the analysis on the 4-bit shifter. Reducing the depth to 6 still leads to a correct abstraction, but reducing the depth to 5 leads to the construction of some false branches. To study the VHDL generated with a functional analysis depth of 5, set the yagleAnalysisDepth variable to 5 and run the Tcl script.</p>
<p>We can see that the VHDL generated with a depth of 5 has more complicated expressions than the VHDL generated with a depth of 6 and more. These expressions are the result of false branches and actually, this VHDL is not functional. With a depth less than 5, they are a huge number of false branches. The research is only stopped by a security mechanism avoiding combinational explosion (actually the maximum length of a branch).</p>
</section>

</section>
</chapter>

<chapter>

<section niv='1'><title>Retrieving ROM Content</title>
<p>The files and scripts needed for this example can be found in:</p>
<code>$AVT_TOOLS_DIR/tutorials/yagle/rom/</code>
<p>This example shows the application of Yagle in the case one wants to verify or to retrieve the content of a ROM. We have here three designs of a ROM of 256 words of 8 bits, programmed in three different ways:</p>
<list>
<item>r256x8_1: data = address</item>
<item>r256x8_5: data = full one</item>
<item>r256x8_6: data = full zero</item>
</list>
<p>The reference VHDL model of <f>r256x8_1</f>, <f>r256x8_5</f> and <f>r256x8_5</f> are respectively described in the files <f>r256x8_1.vbe</f>, <f>r256x8_5.vbe</f> and <f>r256x8_6.vbe</f>. Here is the reference VHDL model of <f>r256x8_1</f>:</p>
<code>
<cl>ENTITY r256x8_1 IS</cl>
<cl>  PORT( adr  : IN BIT_VECTOR(7 DOWNTO 0);</cl>
<cl>        ck   : IN BIT_VECTOR(0 TO 1);</cl>
<cl>        f    : OUT BIT_VECTOR(0 TO 7);</cl>
<cl>        vdd  : IN BIT;</cl>
<cl>        vss  : IN BIT );</cl>
<cl>END r256x8_1;</cl>
<cl>ARCHITECTURE VBE OF r256x8_1 IS</cl>
<cl>   SIGNAL m_out : BIT_VECTOR (0 TO 7);</cl>
<cl>BEGIN</cl>
<cl>   F = m_out WHEN (ck = B"00") ELSE B"00000000";</cl>
<cl>   WITH adr(7 DOWNTO 0) SELECT</cl>
<cl>      m_out(0 TO 7) = B"00000000" WHEN B"00000000",</cl>
<cl>                       B"00000001" WHEN B"00000001",</cl>
<cl>                       B"00000010" WHEN B"00000010",</cl>
<cl>                       B"00000011" WHEN B"00000011",</cl>
<cl>                       B"00000100" WHEN B"00000100",</cl>
<cl>                       B"00000101" WHEN B"00000101",</cl>
<cl>                       B"00000110" WHEN B"00000110",</cl>
<cl>                       B"00000111" WHEN B"00000111",</cl>
<cl>                       B"00001000" WHEN B"00001000",</cl>
<cl>                       B"00001001" WHEN B"00001001",</cl>
<cl>                       B"00001010" WHEN B"00001010",</cl>
<cl>                       B"00001011" WHEN B"00001011",</cl>
<cl>                       ...</cl>
<cl>                       B"11111110" WHEN B"11111110",</cl>
<cl>                       B"11111111" WHEN B"11111111";</cl>
<cl>END VBE;</cl>
</code>
<p>To perform the abstraction of those designs, the line <f>avt_config yagleTristateIsMemory yes</f> has been added in the script.</p>
<p>The <f>run.tcl</f> commands generate the VHDL behavioral descriptions <f>r256x8_1.vhd</f>, <f>r256x8_1.vhd</f> and <f>r256x8_6.vhd</f>.</p>
<p>The content of the ROM can then be retrieved with a simple logic simulation. </p>
<p>The following screenshot displays the simulation trace <f>r256x8_1.vcd</f> of  <f>r256x8_1.vhd</f> (data = address).</p>
<imgsize namehtml="yagtraining_romdisplay.gif" namepdf="yagtraining_romdisplay.gif" wpdf="462pt"/>
</section>


</chapter>



