.TH INF 5 "30 March 2000" "AVERTEC" "File Formats"

.SH NAME
.TP 10
INF
\- YAGLE, TAS and TMA information file

.so man1/avt_origin.1

.SH DESCRIPTION
The information file should be used to help the functional abstractor YAGLE, the timing analyzer TAS or the timing abstractor TMA. 
It contains information which reduces run time and avoids false errors.
The information file should have the '.inf' extension and its name must be the name of the corresponding circuit. YAGLE, TAS and TMA 
will take it into account if the '-i' option is used.
This file contains several sections. Each one begins with a keyword. The declaration order is not important and it is possible to 
use a section more than once. Seperators are blanks, tabulations or newlines and there is no difference between upper or lower 
case characters.

.SH MUTUAL EXCLUSION
If some of the circuit terminals are mutually exclusive, this should be indicated in the MUTEX section using:
.br
.TP 2
-
muxUP{term1, term2, ...}  to express that one port at most in the list is "one".
.br
.TP 2
-
muxDN{term1, term2, ...}  to express that one port at most in the list is "zero".
.br
.TP 2
-
cmpUP{term1, term2, ...} to express that one and only one port in the list is "one".
.br
.TP 2
-
cmpDN{term1, term2, ...} to express that one and only one port in the list is "zero".
.br
Each list ends with semi-colon character ';' and the section ends with the END keyword.

.br
          MUTEX
.br
          muxUP{a,...,d};
.br
          muxDN{m,...,p};
.br
          cmpUP{i,...,l};
.br
          cmpDN{x,...,z};
.br
          ...
.br
          END

.SH INPUT CONNECTORS SPECIFICATION
User can specify connectors which should be considered as inputs. The disassembling process uses
this information to inhibit the construction of cone branches from these connectors.
This directive is essentially useful when dealing with rams, when the user wants to inhibit
the construction of the reading bus.

.br
          INPUTS
.br
          connector0;
.br
          connector1;
.br
          ...
.br
          END

.br

.SH SIGNAL RENAMING
User can rename some signals in the RENAME section. For each signal, the old name and the new name should be given.

.br
          RENAME
.br
          existing_name: new_name;
.br
          *gno*: *latch_data*;
.br
          ...
.br
          END

.br
"new_name" will replace "existing_name" in the behavioural description file. It is possible to use the joker '*'. When the names 
contain the string "gno", this string is replaced by the string "latch_data" (l2_y_gno_01 is replaced by l2_y_latch_data_01).

.SH ORIENTING TRANSISTORS
In order to orient transistors, user can specify a list of signals, each one identifying the source or drain terminal
of a transistor, which should be considered as output terminals.
Transistors are oriented towards these signals.
Orientation of successive transistors is done by associating a level with each signal 
identifying a source or drain terminal. Transistors are then oriented 
from higher level signals to lower level signals.
Transistor orientation is usefull to avoid false branches construction, especially when dealing 
with pass-transistors.

.br
          DIROUT
.br
          s0;
.br
          s1: "1";
.br
          s2: "2";
.br
          ...
.br
          END

.br
If no level specified, the level is implicitely "1".

                        ___
                     __|   |__ 
                        ___   |
                     __|   |__|  ___
                        ___   |_|   |__ s1
                     __|   |__| ----->
                        ___   | 
                     __|   |__|
                       ----->  s2 

.br
Each line ends with the semi-colon character and the section ends with the END keyword. 
It is possible to use the joker '*' as for signal renaming.
The DIROUT directive is equivalent to the '_s' convention (see man yagle and man tas).

.SH BLOCKING FUNCTIONAL ANALYSIS
User can specify a list of signals which should be considered as stop points for the functional analysis phase of the disassembly. 
This means that any logic preceding the stop points will not be used in order to analyse the behaviour of any gate following the stop point.

.br
          STOP
.br
          sig1 ;
.br
          sig2 ;
.br
          sigs* ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and the section ends with the END keyword. 
It is possible to use the joker '*' as for signal renaming.

.SH PATH ELIMINATION
To eliminate some critical paths, a BYPASS section should be used.

.br
          BYPASS
.br
          sig1 ;
.br
          sig2 > ;
.br
          sig3 < ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and the section ends with the END keyword. If a signal appears with no argument, the timing analyzer eliminates all pathes which cross it. With the '>' argument, all paths which end on the signal will be supressed and with the '<' argument, all paths beginning on the signal are suppressed.

.SH CASE ANALYSIS
To perform timing analysis in a specific case, the user can apply a pattern on the netlist with the CONSTRAINT section. It contains internal or external signals constrained by "one" or "zero". The timing analyser propagates the pattern before delay estimation.

.br
          CONSTRAINT
.br
          sig1 : 0 ;
.br
          sig2 : 1 ;
.br
          sig3 : 0 ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and the section ends with the END keyword.

.SH PRECHARGED SIGNALS
Signals whose names end in "_p" are considered to be precharged and therefore dealt with differently by the timing analyzer. If any other signals should be considered precharged these can be specified in the PRECHARGE section.

.br
          PRECHARGE
.br
          sig1 ;
.br
          sig2 ;
.br
          ~ sig3 ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and the section ends with the END keyword. If a signal name is preceded by the '~' character then this signal will not be treated as a precharge, this is to deal with the case of non-precharge signals whose names end in "_p".

.SH INTERMEDIARY POINTS
In order to reduce the number of critical paths identified by the timing analyzer, it can sometimes be useful to specify that certain internal signals be considered as though they were path terminals. The list of these intermediary points is specified in the INTER section. Correct choice of these signals can lead to factorization of the critical paths, and hence a significant reduction in the size of the output file generated.

.br
          INTER
.br
          sig1 ;
.br
          sig2 ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and the section ends with the END keyword.

.SH PATH SELECTION
Another technique for reducing the size of the critical path list is to limit the number of signals which are considered to be path terminals. The list of signals which are allowed to start a critical path is specified in the PATHIN section, and the list of signals allowed to end a critical path is specified in the PATHOUT section.

.br
          PATHIN
.br
          sig1 ;
.br
          sig2 ;
.br
          ...
.br
          END

.br
          PATHOUT
.br
          sig3 ;
.br
          sig4 ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and both sections end with the END keyword.


.SH CHARACTERIZATION
In characterization mode (i.e. with the -lut option), TAS generates lookup tables, depending
on input slopes and output capacitances. The SLOPE and CAPAOUT sections provide various means
for specifying the ranges of slopes and capacitances applied on external pins.
Ranges can be set for selected pins, but a default range can also be given, using the
keyword 'default'.
Ranges can be set by enumeration, using the syntax :
.br

          signal : (slope_0, slope_1, ... , slope_n) ;
          
.br
Ranges can also be set by specifying a lower bound,  an upper bound, and a step, using the syntax :
.br

          signal : (lower_bound : upper_bound : step) ;
          
.br
In the SLOPE section, input slopes are given in nano-seconds.
.br

          SLOPE
.br
          sig1 : (100, 400, 900, 1500, 2200, 3000) ;
.br
          sig2 : (100 : 2000 : 100) ;
.br
          default : (100, 400, 900, 1500, 2200, 3000) ;
.br
          ...
.br
          END
          
.br
In the CAPAOUT section, a scaling factor is also available. The range of capacitance
can be given for specific length and width of transistors. The capacitances really applied
on the pin are then scaled by the ratio between the given length and width, and the characteristic
length and width of the transistors of the cell driving the pin.
Capacitances are given in femto-fahrads, lengths are given microns.
.br

          CAPAOUT
.br
          sig1 : (0.7, 80.5, 190.0, 300.5) ; 
.br
          sig2 : (0 : 250 : 25) ;
.br
          default : (0.3, 38.5, 147.0, 311.5) W=0.18 L=0.6 ; 
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and both sections end with the END keyword.

.SH CLOCK AND ASYNCHRONOUS SIGNAL SPECIFICATION
Those sections are only used by the Timing Model Abstractor TMA. In some cases, actually
when latches and registers commands are driven by more than one pin, TMA is unable to
automatically detect which one is a clock pin, and which one is a write enable or an
asynchronous signal pin.

.br
          CLOCK
.br
          ckp ;
.br
          ckn ;
.br
          ...
.br
          END
.br


          ASYNCHRON
.br
          rn ;
.br
          ...
.br
          END

.br
Each line ends with the semi-colon character and both sections end with the END keyword.


.SH SEE ALSO
.br
yagle(1), tas(1), tma(1)

.so man1/avt_bug_report.1

