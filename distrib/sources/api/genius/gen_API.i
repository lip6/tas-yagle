
%rename (gns_FlattenNetlist_sub) gns_FlattenNetlist;
%rename (gns_AddRC_sub) gns_AddRC;

extern void gns_ChangeHierarchyDivider (Netlist *netlist, char divider);
extern void gns_StripNetlist (Netlist *netlist);
void gns_StripNetlistFurther (Netlist *netlist);
//extern void gns_DumpCorrespTable ();
extern void gns_SetLoad (Netlist *netlist, char *connector, double load);
extern Netlist *gns_FlattenNetlist (Netlist *netlist, int rc);
void gns_FreeNetlist (Netlist *netlist);
Netlist *gns_AddRC (Netlist *netlist, int rc);
void gns_SetModelAsLeaf(char *name);
void gns_ReduceInstance (Netlist *netlist, char *ins_name);
void gns_KeepInstance (Netlist *fig, char *ins_name);
void gns_AddExternalTransistors (char *str);
void gns_ViewLo (Netlist *ptfig);
//void gns_BuildCorrespTable ();
void gns_DriveNetlist (Netlist *ptfig, char *format, char *path, char *name);
Netlist *gns_GetNetlist ();
Netlist *gns_DuplicateNetlist (Netlist *source);
Netlist *gns_GetInstanceNetlist (char *name);
//Netlist *gns_BuildNetlist ();
Signal *gns_GetCorrespondingSignal(char *name);
char *gns_GetSignalName(Signal *signal);
char *gns_GetInstanceName(Instance *instance);
char *gns_GetInstanceModelName(Instance *instance);
void gns_GetModelSignalRange(char *name, int *left, int *right);
List *gns_GetModelConnectorList();
Connector *gns_GetInstanceConnector(Instance *instance, char *name);
Instance *gns_GetInstance(Netlist *netlist, char *name);
double gns_GetConnectorCapa (Connector *lc);
List *gns_GetConnectorList(Netlist *netlist);
char *gns_GetConnectorDirection(Connector *connector);
char *gns_GetConnectorName(Connector *connector);
Signal *gns_GetConnectorSignal(Connector *connector);
List *gns_GetModelSignalList();
int gns_IsSignalExternal(Signal *signal);
char *gns_Vectorize(char *name, int index);
char *gns_Vectorize2D(char *name, int index0, int index1);
List *gns_GetInstanceConnectorList(Instance *ls);
List *gns_GetAllCorrespondingInstances();
List *gns_GetAllCorrespondingInstanceModels();
Transistor *gns_GetCorrespondingTransistor(char *name);
List *gns_GetAllCorrespondingTransistors();
Connector *gns_GetTransistorGrid(Transistor *transistor);
Connector *gns_GetTransistorDrain(Transistor *transistor);
Connector *gns_GetTransistorSource(Transistor *transistor);
char gns_GetTransistorType(Transistor *transistor);
char *gns_GetTransistorTypeName(Transistor *transistor);
double gns_GetTransistorParameter(char *name, Transistor *transistor);
char *gns_GetTransistorName(Transistor *transistor);
List *gns_GetAllTransistorsConnectedtoSignal(Signal *signal);
Connector *gns_GetExternalConnectorOfSignal(Signal *signal);
int gns_VectorIndex(char *name);
char *gns_VectorRadical(char *name);
char *gns_CreateVhdlName(char *name);
void gns_ChangeInstanceModelName(Instance *instance, char *name);
Signal *gns_GetSignal (Netlist *netlist, char *signame);
Connector *gns_GetConnector (Netlist *netlist, char *con_name);
Transistor *gns_GetTransistor (Netlist *netlist, char *tr_name);
char    *gns_AWE_GetWorstInstance ( Netlist *netlist, char *insname, Connector *lc, double vdd);
char    *gns_AWE_GetBestInstance ( Netlist *netlist, char *insname, Connector *lc, double vdd);
Netlist *gns_AWE_KeepBestInstance  ( Netlist *netlist, Netlist *flatnetlist, char *insname, Connector *lc, double vdd);
Netlist *gns_AWE_KeepWorstInstance ( Netlist *netlist, Netlist *flatnetlist, char *insname, Connector *lc, double vdd);
void gns_AWE_GetOrderedInstanceIndex(Netlist *lofig, char *rule, Connector *connector, int **tab, int *nb);
int gns_GetInstanceLoopIndex(Instance *ins, char **ptptname);
void gns_GetInstanceLoopRange(Netlist *lf, Instance *ins, int *left, int *right);
CorrespondingInstance *gns_GetCorrespondingInstance(char *name);
Signal *gns_GetCorrespondingInstanceConnectorSignal(CorrespondingInstance *ins, char *name);
char *gns_GetCorrespondingInstanceName(CorrespondingInstance *crt);
char *gns_GetCorrespondingInstanceModelName(CorrespondingInstance *subins);
int gns_GetGeneric(char *name);
char *gns_GetCurrentArchi();
char *gns_GetCurrentModel();
char *gns_GetCurrentInstance();
//void *callfunc(char *funcname, ...);
void *callfunc_tcl(char *funcname, StringList *args);
void ASSOCIATE_BEHAVIOUR(void *func);
void gns_DriveSpiceNetlistGroup(List *list, char *filename);
void gns_AddCapa(Netlist *fig, char *con_name, double capa);
void gns_AddResi(Netlist *fig, char *con1_name, char *con2_name, double resi);
void gns_AddLineRC(Netlist *fig, char *con1_name, char *con2_name, double resi, double capa1, double capa2);
GNSRun *gns_RunGNS(Netlist *netlist, char *celldir, char *libname);
void gns_DestroyGNSRun(GNSRun *afg);
void gns_EnterGNSContext(GNSRun *gnsrun, char *instance);
void gns_ExitGNSContext();
Netlist *gns_GetBlackboxNetlist(char *name);
int gns_IsTopLevel();
void gns_RenameInstanceFigure(Netlist *lf, char *instance, char *origname, char *newname);
void gns_FillBlackBoxes(Netlist *lf, List *morenetlist);
char *_equiv(char *name);
void gns_ChangeNetlistName(Netlist *lf, char *name);
List *gns_GetGNSTopLevels(GNSRun *gnsrun);
Netlist *gns_CutNetlist(GNSRun *gnsrun);
void gns_ShowOutsideInfo(char *signame, FILE *f);
void gns_REJECT_INSTANCE();
void gns_KEEP_INSTANCE();
void gns_REJECT_MODEL();
void gns_KEEP_MODEL();
char *gns_GetWorkingFigureName();
char *gen_info();
int gns_IsVss(Signal *sig);
int gns_IsVdd(Signal *sig);
int gns_IsBlackBox();
double gns_GetSignalVoltage(char *name);
int gns_GetSignalVoltageSwing(char *name, double *low, double *high);
